/////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2012 Alan Wright. All rights reserved.
// Distributable under the terms of the Apache License (Version 2.0).
/////////////////////////////////////////////////////////////////////////////

#ifndef CONFIG_RENDER_OPTIONS_H_
#define CONFIG_RENDER_OPTIONS_H_

#include "configcpp/detail/config_base.h"

namespace config {

///
/// A set of options related to rendering a {@link ConfigValue}. Passed to
/// {@link ConfigValue#render(ConfigRenderOptions)}.
///
/// <p>
/// Here is an example of creating a {@code ConfigRenderOptions}:
///
/// <pre>
///     ConfigRenderOptions options =
///         ConfigRenderOptions::defaults()->setComments(false)
/// </pre>
///
class ConfigRenderOptions : public ConfigBase {
public:
    CONFIG_CLASS(ConfigRenderOptions);

    ConfigRenderOptions(bool originComments, bool comments, bool formatted, bool json);

    /// Returns the default render options which are verbose (commented and
    /// formatted). See {@link ConfigRenderOptions#concise} for stripped-down
    /// options. This rendering will not be valid JSON since it has comments.
    ///
    /// @return the default render options
    static ConfigRenderOptionsPtr defaults();

    /// Returns concise render options (no whitespace or comments). For a
    /// resolved {@link Config}, the concise rendering will be valid JSON.
    ///
    /// @return the concise render options
    static ConfigRenderOptionsPtr concise();

    /// Returns options with comments toggled. This controls human-written
    /// comments but not the autogenerated "origin of this setting" comments,
    /// which are controlled by {@link ConfigRenderOptions#setOriginComments}.
    ///
    /// @param value
    ///            true to include comments in the render
    /// @return options with requested setting for comments
    ConfigRenderOptionsPtr setComments(bool value);

    /// Returns whether the options enable comments. This method is mostly used
    /// by the config lib internally, not by applications.
    ///
    /// @return true if comments should be rendered
    bool getComments();

    /// Returns options with origin comments toggled. If this is enabled, the
    /// library generates comments for each setting based on the
    /// {@link ConfigValue#origin} of that setting's value. For example these
    /// comments might tell you which file a setting comes from.
    ///
    /// <p>
    /// {@code setOriginComments()} controls only these autogenerated
    /// "origin of this setting" comments, to toggle regular comments use
    /// {@link ConfigRenderOptions#setComments}.
    ///
    /// @param value
    ///            true to include autogenerated setting-origin comments in the
    ///            render
    /// @return options with origin comments toggled
    ConfigRenderOptionsPtr setOriginComments(bool value);

    /// Returns whether the options enable automated origin comments. This method
    /// is mostly used by the config lib internally, not by applications.
    ///
    /// @return true if origin comments should be rendered
    bool getOriginComments();

    /// Returns options with formatting toggled. Formatting means indentation and
    /// whitespace, enabling formatting makes things prettier but larger.
    ///
    /// @param value
    ///            true to include comments in the render
    /// @return options with requested setting for formatting
    ConfigRenderOptionsPtr setFormatted(bool value);

    /// Returns whether the options enable formatting. This method is mostly used
    /// by the config lib internally, not by applications.
    ///
    /// @return true if comments should be rendered
    bool getFormatted();

    /// Returns options with JSON toggled. JSON means that HOCON extensions
    /// (omitting commas, quotes for example) won't be used. However, whether to
    /// use comments is controlled by the separate {@link #setComments(boolean)}
    /// and {@link #setOriginComments(boolean)} options. So if you enable
    /// comments you will get invalid JSON despite setting this to true.
    ///
    /// @param value
    ///            true to include non-JSON extensions in the render
    /// @return options with requested setting for JSON
    ConfigRenderOptionsPtr setJson(bool value);

    /// Returns whether the options enable JSON. This method is mostly used by
    /// the config lib internally, not by applications.
    ///
    /// @return true if only JSON should be rendered
    bool getJson();

    virtual std::string toString() override;

private:
    bool originComments;
    bool comments;
    bool formatted;
    bool json;
};

}

#endif // CONFIG_RENDER_OPTIONS_H_
